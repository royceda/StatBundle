{% extends "StatBundle::layout.html.twig" %}
{% block body %}
<script type="text/javascript">
dhtmlxEvent(window, "load", function(){
  var layout          = new dhtmlXLayoutObject(document.body, "3L");
  var layout1         = layout.cells("a").attachLayout("2E");
  var menu            = layout.attachMenu();
  var toolbar         = layout.attachToolbar();
  var jobGrid         = layout1.cells("b").attachGrid();
  var tabbar          = layout.cells("b").attachTabbar();
  var dataFrameGrid   = layout.cells("c").attachGrid();


  layout1.cells("a").setText("Menu");
  layout1.cells("a").setHeight(220);

  globalMenu = layout1.cells("a").attachMenu();
  globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
  globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");


  myTabs = layout1.cells("a").attachTabbar();
  myTabs.addTab("a1","{{ "Welcome" | trans }}","100px", null, true);
  myTabs.addTab("a2","{{ "Advanced" | trans }}","100px", null, true);

  myRibbon = myTabs.cells("a1").attachRibbon();
  myRibbon.setIconPath( "{{ asset('bundles/ariicore/images/ribbon/') }}" );
  myRibbon.loadStruct("{{ url('json_JID_ribbon') }}");
  myRibbon.attachEvent("onStateChange", StateRibbon );
  myRibbon.attachEvent("onClick", ClickRibbon);
  //il y a un petit bug quand on change de db
  myTabs.cells("a1").setActive();
  myFormDate = myTabs.cells("a2").attachForm();
  myFormDate.loadStruct("{{url('xml_Stat_date_form')}}?first=true");



  layout1.cells("b").setText("Jobs");
  //  layout1.cells("b").hideHeader();
  layout.cells("b").setText("Charts");
  layout.cells("a").setWidth(450);
  layout.cells("c").setText("Historique du job");

  tabbar.addTab("a1", "Description"    , "100px", null, true);
  tabbar.addTab("a2", "Whiskers"  , "100px");
  tabbar.addTab("a3", "Histogram", "100px");
  tabbar.addTab("a4", "Pie"  , "100px");
  tabbar.addTab("a5", "Duration", "100px");


  aLayout = tabbar.cells("a4").attachLayout("2U");
  aLayout.cells("a").setText("Pie");
  aLayout.cells("a").setWidth("450");
  aLayout.cells("a").attachURL("{{url('pie_chart')}}");
  aLayout.cells("b").setText("Anomaly");
  aGrid = aLayout.cells("b").attachGrid();

  aGrid.setImagePath("codebase/imgs/");
  aGrid.setIconsPath("icons/");
  aGrid.setHeader("ID,START_TIME,CAUSE, {{ "Duration" | trans }}");
  aGrid.attachHeader("#text_filter,#text_filter,#select_filter,#text_filter");
  aGrid.setColTypes("ro,ro,ro,ro");
  aGrid.setInitWidths("200,200,200,100");
  aGrid.setColAlign("left,left,left,left");
  aGrid.enableSmartRendering(true, 15);
  aGrid.init();
  aGrid.load("{{ url('anomaly_xml')}}");




  tabbar.cells('a5').attachURL("{{url('line_chart')}}");
  tabbar.cells('a3').attachURL("{{url('bar_chart')}}");
  tabbar.cells('a2').attachURL("{{url('box_chart')}}");
  //var statGrid = tabbar.cells('a1').attachGrid();
  //statGrid.load("{{url('dataframe_xml')}}");


  //contactForm.loadStruct("data/form.xml");
  //contactForm.bind(jobGrid);

  //grid jobs
  jobGrid.setImagePath("codebase/imgs/");
  jobGrid.setIconsPath("icons/");
  jobGrid.setHeader("Spooler,Job_Name");
  jobGrid.attachHeader("#select_filter,#text_filter");
  jobGrid.setColTypes("ro,ro");
  jobGrid.setInitWidths("100,*");
  jobGrid.setColAlign("left,left");
  jobGrid.init();
  jobGrid.enableSmartRendering(true, 10);
  //jobGrid.load("{{ url('Stat_jobs_xml')}}");
  /*jobGrid.attachEvent("onRowDblClicked", function JobDetail(rId, cInd){

    dataFrameGrid.clearAll();
    dataFrameGrid.load("{{ url('Stat_job_history_xml') }}?id="+rId, function (rId) {
      //les autres


      layout.cells("c").progressOff();
  });
});*/



  //grid dataframe
  dataFrameGrid.setImagePath("codebase/imgs/");
  dataFrameGrid.setIconsPath("icons/");
  dataFrameGrid.setHeader("ID, Spooler, Job_Name, Start_date, {{ "Duration" | trans }}, STEPS, PARAMETERS");
  dataFrameGrid.setColSorting("str,str,str,str,int,str,str");
  //dataFrameGrid.setColTypes("ro, ro, ro, ro, ro, ro, ro");
  dataFrameGrid.setInitWidths("100,150,250,250,250,250,250");
  dataFrameGrid.setColAlign("left, left, left, left, left, left,left");
  dataFrameGrid.init();
  dataFrameGrid.enableSmartRendering(true, 5);
  jobGrid.attachEvent("onRowDblClicked", function Analyze(rId, cInd){
    layout.cells("b").progressOn();
    layout.cells("c").progressOn();statGrid.clearAll();
    statGrid.clearAll();
    aGrid.clearAll();

    /*var date1 = "{{app.session.get('past')}}";
    alert(date1);
    var date2 = "{{app.session.get('future')}}" ;*/

    var date2 = calTo.getFormatedDate();
    var date1 = calFrom.getFormatedDate();
    //alert(date1);

    statGrid.load("{{ url('describe_xml') }}?id="+rId+"&from="+date1+"&to="+date2, function (rId) {
      aGrid.load("{{ url('anomaly_xml')}}");
      aLayout.cells("a").attachURL("{{url('pie_chart')}}");
      tabbar.cells('a5').attachURL("{{url('line_chart')}}");
        //tabbar.cells('a4').attachURL("{{url('pie_chart')}}",null, true);
      tabbar.cells('a3').attachURL("{{url('bar_chart')}}",null, true);
      tabbar.cells('a2').attachURL("{{url('box_chart')}}",null, true);
      layout.cells("b").progressOff();
    });


    dataFrameGrid.load("{{ url('Stat_job_history_xml') }}?id="+rId, function (rId) {
      //les autres
      layout.cells("c").progressOff();
    });

    myFormDate.setItemValue("jobname",rId);
    //par controller php

    var xreq = new XMLHttpRequest();
    xreq.open("GET", "{{url('get_job_name_by_id')}}?id="+rId, false );
    xreq.send(null);
    var job = xreq.responseText;
    var xreq2 = new XMLHttpRequest();
    xreq2.open("GET", "{{url('get_spooler_by_job_id')}}?id="+rId, false );
    xreq2.send(null);
    var spooler = xreq2.responseText;

    myFormDate.setItemValue("jobname", job);
    myFormDate.setItemValue("spooler", spooler);
  });


  //dataFrameGrid.load("{{url('dataframe_xml')}}");

  //table of stat
  statGrid = tabbar.cells("a1").attachGrid();
  statGrid.setImagePath("codebase/imgs/");
  statGrid.setIconsPath("icons/");
  statGrid.setHeader("variable, {{ "Count" | trans }}, {{ "Mean" | trans }}, {{ "std" | trans }}, min, 25%, 50%,75%,max");
  statGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro");
  statGrid.setInitWidths("200,100,100,100,100,100,100,100,100");
  statGrid.setColAlign("left,center,left,center,center,center,center,center,center");
  statGrid.init();
  //statGrid.load("./tempChart/gridStat.xml");
  statGrid.load("{{url('describe_xml')}}");


  //toolbar.setIconsPath("icons/");
  //toolbar.loadStruct("data/toolbar.xml");

  //menu.setIconsPath("icons/");
  //menu.loadStruct("data/menu.xml");



  myFormDate.attachEvent("onXLE", function (name, value){
    calFrom = myFormDate.getCalendar("start_date");
    calTo = myFormDate.getCalendar("end_date");
    var date2 = calTo.getFormatedDate();
    var date1 = calFrom.getFormatedDate();
    calTo.setSensitiveRange(date1, null);
    calFrom.setSensitiveRange(null, date2);
  });


    myFormDate.attachEvent("onChange", function (name, value){
      calFrom = myFormDate.getCalendar("start_date");
      calTo = myFormDate.getCalendar("end_date");
      var date2 = calTo.getFormatedDate();
      var date1 = calFrom.getFormatedDate();
      calTo.setSensitiveRange(date1, null);
      calFrom.setSensitiveRange(null, date2);
    });


    myFormDate.attachEvent("onButtonClick",function(id){


      switch (id) {
        case 'proceed':
           var jobname = myFormDate.getInput("jobname").value;
           var spooler = myFormDate.getInput("spooler").value;
           //      var type    = myFormDate.getInput("type").value;
           var type = myFormDate.getCombo("choice").getSelectedValue();

           //layout1.cells("b").progressOn();
           calFrom = myFormDate.getCalendar("start_date");
           calTo = myFormDate.getCalendar("end_date");
           var date2 = calTo.getFormatedDate();
           var date1 = calFrom.getFormatedDate();
           if (jobname != ""){
             //alert(jobname);
             DateRefresh(date1, date2, type, jobname, spooler);
           }else{
             DateRefresh(date1, date2);
           }
           break;
        default:
           alert(id);
           break;
      }
    });


    function DateRefresh(date1, date2, type, name = "", spooler = ""){
      layout1.cells("b").progressOn();
      //alert("from "+date1+" to "+date2);
      var tmp = "true"
      var route = "{{ url('Stat_jobs_date_xml', {'date1' : 'date1', 'date2':'date2'}) }}";
      route = route.replace("date1", date1);
      route = route.replace("date2", date2);
      jobGrid.load(route);

      if(name == ""){
        //a changer car duplication de code de refresh
        var route2 = "{{ url('Stat_jobs_xml') }}";
        //route2 = route.replace("var", false);
      }else{
        //requete avec le where job
        var route2 = "{{ url('Stat_job_xml') }}?jobname="+name+"&spooler="+spooler+"&type="+type;
      }

      jobGrid.load(route2,function(){
        layout1.cells("b").progressOff();
        jobGrid.refreshFilters();
        jobGrid.filterByAll();
        jobGrid.filterBy(4, status);
        layout1.progressOff();
      });
    }


});

</script>
 </html>
{% endblock %}
